//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class PalsApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7020";
    }

    getTribeNames(): Observable<string[]> {
        let url_ = this.baseUrl + "/v1/pals";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTribeNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTribeNames(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetTribeNames(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTribe(tribeName: string): Observable<PalTribe> {
        let url_ = this.baseUrl + "/v1/pals/{tribeName}";
        if (tribeName === undefined || tribeName === null)
            throw new Error("The parameter 'tribeName' must be defined.");
        url_ = url_.replace("{tribeName}", encodeURIComponent("" + tribeName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTribe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTribe(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PalTribe>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PalTribe>;
        }));
    }

    protected processGetTribe(response: HttpResponseBase): Observable<PalTribe> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PalTribe.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getIcon(tribeName: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/pals/{tribeName}/icon";
        if (tribeName === undefined || tribeName === null)
            throw new Error("The parameter 'tribeName' must be defined.");
        url_ = url_.replace("{tribeName}", encodeURIComponent("" + tribeName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIcon(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIcon(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetIcon(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPal(tribeName: string): Observable<Pal> {
        let url_ = this.baseUrl + "/v1/pals/{tribeName}/main";
        if (tribeName === undefined || tribeName === null)
            throw new Error("The parameter 'tribeName' must be defined.");
        url_ = url_.replace("{tribeName}", encodeURIComponent("" + tribeName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPal(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPal(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Pal>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Pal>;
        }));
    }

    protected processGetPal(response: HttpResponseBase): Observable<Pal> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pal.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBossPal(tribeName: string): Observable<Pal> {
        let url_ = this.baseUrl + "/v1/pals/{tribeName}/boss";
        if (tribeName === undefined || tribeName === null)
            throw new Error("The parameter 'tribeName' must be defined.");
        url_ = url_.replace("{tribeName}", encodeURIComponent("" + tribeName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBossPal(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBossPal(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Pal>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Pal>;
        }));
    }

    protected processGetBossPal(response: HttpResponseBase): Observable<Pal> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pal.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getGymPal(tribeName: string): Observable<Pal> {
        let url_ = this.baseUrl + "/v1/pals/{tribeName}/gym";
        if (tribeName === undefined || tribeName === null)
            throw new Error("The parameter 'tribeName' must be defined.");
        url_ = url_.replace("{tribeName}", encodeURIComponent("" + tribeName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGymPal(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGymPal(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Pal>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Pal>;
        }));
    }

    protected processGetGymPal(response: HttpResponseBase): Observable<Pal> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pal.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class PalworldDataApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7020";
    }

    getPalworldVersions(): Observable<string[]> {
        let url_ = this.baseUrl + "/v1/palworld/versions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPalworldVersions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPalworldVersions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetPalworldVersions(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class PalworldSteamApplicationApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7020";
    }

    getSteamApplicationId(): Observable<string> {
        let url_ = this.baseUrl + "/v1/application/steam/id";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSteamApplicationId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSteamApplicationId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGetSteamApplicationId(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSteamApplicationName(): Observable<string> {
        let url_ = this.baseUrl + "/v1/application/steam/name";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSteamApplicationName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSteamApplicationName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGetSteamApplicationName(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSteamBuildId(): Observable<string> {
        let url_ = this.baseUrl + "/v1/application/steam/build-id";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSteamBuildId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSteamBuildId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGetSteamBuildId(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSteamApplicationSize(): Observable<number> {
        let url_ = this.baseUrl + "/v1/application/steam/size";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSteamApplicationSize(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSteamApplicationSize(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processGetSteamApplicationSize(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class PalTribe implements IPalTribe {
    name!: string;
    pals!: Pal[];

    constructor(data?: IPalTribe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["pals"])) {
                this.pals = [] as any;
                for (let item of _data["pals"])
                    this.pals!.push(Pal.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PalTribe {
        data = typeof data === 'object' ? data : {};
        let result = new PalTribe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.pals)) {
            data["pals"] = [];
            for (let item of this.pals)
                data["pals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPalTribe {
    name: string;
    pals: Pal[];
}

export class Pal implements IPal {
    identity!: PalIdentity;
    isBoss!: boolean;
    isGymBoss!: boolean;
    isNocturnal!: boolean;
    isEdible!: boolean;
    isPredator!: boolean;
    element1!: PalElement;
    element2?: PalElement | undefined;
    statistics!: PalStatistics;
    sensors!: PalSensors;
    nutrition!: PalNutrition;
    combat!: PalCombat;
    breeding!: PalBreeding;
    work!: PalWork;

    constructor(data?: IPal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.identity = new PalIdentity();
            this.statistics = new PalStatistics();
            this.sensors = new PalSensors();
            this.nutrition = new PalNutrition();
            this.combat = new PalCombat();
            this.breeding = new PalBreeding();
            this.work = new PalWork();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identity = _data["identity"] ? PalIdentity.fromJS(_data["identity"]) : new PalIdentity();
            this.isBoss = _data["isBoss"];
            this.isGymBoss = _data["isGymBoss"];
            this.isNocturnal = _data["isNocturnal"];
            this.isEdible = _data["isEdible"];
            this.isPredator = _data["isPredator"];
            this.element1 = _data["element1"];
            this.element2 = _data["element2"];
            this.statistics = _data["statistics"] ? PalStatistics.fromJS(_data["statistics"]) : new PalStatistics();
            this.sensors = _data["sensors"] ? PalSensors.fromJS(_data["sensors"]) : new PalSensors();
            this.nutrition = _data["nutrition"] ? PalNutrition.fromJS(_data["nutrition"]) : new PalNutrition();
            this.combat = _data["combat"] ? PalCombat.fromJS(_data["combat"]) : new PalCombat();
            this.breeding = _data["breeding"] ? PalBreeding.fromJS(_data["breeding"]) : new PalBreeding();
            this.work = _data["work"] ? PalWork.fromJS(_data["work"]) : new PalWork();
        }
    }

    static fromJS(data: any): Pal {
        data = typeof data === 'object' ? data : {};
        let result = new Pal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identity"] = this.identity ? this.identity.toJSON() : <any>undefined;
        data["isBoss"] = this.isBoss;
        data["isGymBoss"] = this.isGymBoss;
        data["isNocturnal"] = this.isNocturnal;
        data["isEdible"] = this.isEdible;
        data["isPredator"] = this.isPredator;
        data["element1"] = this.element1;
        data["element2"] = this.element2;
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any>undefined;
        data["sensors"] = this.sensors ? this.sensors.toJSON() : <any>undefined;
        data["nutrition"] = this.nutrition ? this.nutrition.toJSON() : <any>undefined;
        data["combat"] = this.combat ? this.combat.toJSON() : <any>undefined;
        data["breeding"] = this.breeding ? this.breeding.toJSON() : <any>undefined;
        data["work"] = this.work ? this.work.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPal {
    identity: PalIdentity;
    isBoss: boolean;
    isGymBoss: boolean;
    isNocturnal: boolean;
    isEdible: boolean;
    isPredator: boolean;
    element1: PalElement;
    element2?: PalElement | undefined;
    statistics: PalStatistics;
    sensors: PalSensors;
    nutrition: PalNutrition;
    combat: PalCombat;
    breeding: PalBreeding;
    work: PalWork;
}

export class PalIdentity implements IPalIdentity {
    tribeName!: string;
    name!: string;
    displayName!: string;

    constructor(data?: IPalIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tribeName = _data["tribeName"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): PalIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new PalIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tribeName"] = this.tribeName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface IPalIdentity {
    tribeName: string;
    name: string;
    displayName: string;
}

export enum PalElement {
    Unknown = 0,
    Dark = 1,
    Dragon = 2,
    Earth = 3,
    Electricity = 4,
    Fire = 5,
    Ice = 6,
    Leaf = 7,
    Normal = 8,
    Water = 9,
}

export class PalStatistics implements IPalStatistics {
    size!: PalSize;
    rarity!: number;
    expRatio!: number;
    stamina!: number;
    slowWalkSpeed!: number;
    walkSpeed!: number;
    runSpeed!: number;
    rideSprintSpeed!: number;
    captureRate!: number;
    price!: number;

    constructor(data?: IPalStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.size = _data["size"];
            this.rarity = _data["rarity"];
            this.expRatio = _data["expRatio"];
            this.stamina = _data["stamina"];
            this.slowWalkSpeed = _data["slowWalkSpeed"];
            this.walkSpeed = _data["walkSpeed"];
            this.runSpeed = _data["runSpeed"];
            this.rideSprintSpeed = _data["rideSprintSpeed"];
            this.captureRate = _data["captureRate"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): PalStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new PalStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["rarity"] = this.rarity;
        data["expRatio"] = this.expRatio;
        data["stamina"] = this.stamina;
        data["slowWalkSpeed"] = this.slowWalkSpeed;
        data["walkSpeed"] = this.walkSpeed;
        data["runSpeed"] = this.runSpeed;
        data["rideSprintSpeed"] = this.rideSprintSpeed;
        data["captureRate"] = this.captureRate;
        data["price"] = this.price;
        return data;
    }
}

export interface IPalStatistics {
    size: PalSize;
    rarity: number;
    expRatio: number;
    stamina: number;
    slowWalkSpeed: number;
    walkSpeed: number;
    runSpeed: number;
    rideSprintSpeed: number;
    captureRate: number;
    price: number;
}

export enum PalSize {
    Unknown = 0,
    XS = 1,
    S = 2,
    M = 3,
    L = 4,
    XL = 5,
}

export class PalSensors implements IPalSensors {
    viewingDistance!: number;
    viewingAngle!: number;
    hearingRate!: number;

    constructor(data?: IPalSensors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.viewingDistance = _data["viewingDistance"];
            this.viewingAngle = _data["viewingAngle"];
            this.hearingRate = _data["hearingRate"];
        }
    }

    static fromJS(data: any): PalSensors {
        data = typeof data === 'object' ? data : {};
        let result = new PalSensors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewingDistance"] = this.viewingDistance;
        data["viewingAngle"] = this.viewingAngle;
        data["hearingRate"] = this.hearingRate;
        return data;
    }
}

export interface IPalSensors {
    viewingDistance: number;
    viewingAngle: number;
    hearingRate: number;
}

export class PalNutrition implements IPalNutrition {
    maxFullStomach!: number;
    fullStomachDecreaseRate!: number;
    foodAmount!: number;

    constructor(data?: IPalNutrition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxFullStomach = _data["maxFullStomach"];
            this.fullStomachDecreaseRate = _data["fullStomachDecreaseRate"];
            this.foodAmount = _data["foodAmount"];
        }
    }

    static fromJS(data: any): PalNutrition {
        data = typeof data === 'object' ? data : {};
        let result = new PalNutrition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxFullStomach"] = this.maxFullStomach;
        data["fullStomachDecreaseRate"] = this.fullStomachDecreaseRate;
        data["foodAmount"] = this.foodAmount;
        return data;
    }
}

export interface IPalNutrition {
    maxFullStomach: number;
    fullStomachDecreaseRate: number;
    foodAmount: number;
}

export class PalCombat implements IPalCombat {
    hp!: number;
    meleeAttack!: number;
    shotAttack!: number;
    defense!: number;
    support!: number;

    constructor(data?: IPalCombat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hp = _data["hp"];
            this.meleeAttack = _data["meleeAttack"];
            this.shotAttack = _data["shotAttack"];
            this.defense = _data["defense"];
            this.support = _data["support"];
        }
    }

    static fromJS(data: any): PalCombat {
        data = typeof data === 'object' ? data : {};
        let result = new PalCombat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hp"] = this.hp;
        data["meleeAttack"] = this.meleeAttack;
        data["shotAttack"] = this.shotAttack;
        data["defense"] = this.defense;
        data["support"] = this.support;
        return data;
    }
}

export interface IPalCombat {
    hp: number;
    meleeAttack: number;
    shotAttack: number;
    defense: number;
    support: number;
}

export class PalBreeding implements IPalBreeding {
    maleProbability!: number;
    breedingRank!: number;

    constructor(data?: IPalBreeding) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maleProbability = _data["maleProbability"];
            this.breedingRank = _data["breedingRank"];
        }
    }

    static fromJS(data: any): PalBreeding {
        data = typeof data === 'object' ? data : {};
        let result = new PalBreeding();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maleProbability"] = this.maleProbability;
        data["breedingRank"] = this.breedingRank;
        return data;
    }
}

export interface IPalBreeding {
    maleProbability: number;
    breedingRank: number;
}

export class PalWork implements IPalWork {
    craftSpeed!: number;
    transportSpeed!: number;
    kindling!: number;
    watering!: number;
    planting!: number;
    generatingElectricity!: number;
    handwork!: number;
    gathering!: number;
    lumbering!: number;
    mining!: number;
    oilExtraction!: number;
    medicineProduction!: number;
    cooling!: number;
    transporting!: number;
    farming!: number;

    constructor(data?: IPalWork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.craftSpeed = _data["craftSpeed"];
            this.transportSpeed = _data["transportSpeed"];
            this.kindling = _data["kindling"];
            this.watering = _data["watering"];
            this.planting = _data["planting"];
            this.generatingElectricity = _data["generatingElectricity"];
            this.handwork = _data["handwork"];
            this.gathering = _data["gathering"];
            this.lumbering = _data["lumbering"];
            this.mining = _data["mining"];
            this.oilExtraction = _data["oilExtraction"];
            this.medicineProduction = _data["medicineProduction"];
            this.cooling = _data["cooling"];
            this.transporting = _data["transporting"];
            this.farming = _data["farming"];
        }
    }

    static fromJS(data: any): PalWork {
        data = typeof data === 'object' ? data : {};
        let result = new PalWork();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["craftSpeed"] = this.craftSpeed;
        data["transportSpeed"] = this.transportSpeed;
        data["kindling"] = this.kindling;
        data["watering"] = this.watering;
        data["planting"] = this.planting;
        data["generatingElectricity"] = this.generatingElectricity;
        data["handwork"] = this.handwork;
        data["gathering"] = this.gathering;
        data["lumbering"] = this.lumbering;
        data["mining"] = this.mining;
        data["oilExtraction"] = this.oilExtraction;
        data["medicineProduction"] = this.medicineProduction;
        data["cooling"] = this.cooling;
        data["transporting"] = this.transporting;
        data["farming"] = this.farming;
        return data;
    }
}

export interface IPalWork {
    craftSpeed: number;
    transportSpeed: number;
    kindling: number;
    watering: number;
    planting: number;
    generatingElectricity: number;
    handwork: number;
    gathering: number;
    lumbering: number;
    mining: number;
    oilExtraction: number;
    medicineProduction: number;
    cooling: number;
    transporting: number;
    farming: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}